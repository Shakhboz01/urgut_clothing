<% rate = CurrencyRate.last.rate %>

<div class='p-3' style='color: black; box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;'>
  <%= simple_form_for(product_sell) do |f| %>
    <div class='form-inputs'>
      <%= f.error_notification %>
      <%= f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present? %>
      <%= f.association :sale, as: :hidden %>
      <%= f.label :sell_by_piece, 'продать по штук:' %>
      <%= f.input :sell_by_piece, label: false %>
      <div class='row'>
        <div class='col-sm-6'>
          <%= f.input :barcode, label: 'поиск по кодам:', input_html: {id: 'code-input', autofocus: 'true'} %>
        </div>
        <div class='col-sm-6'>
          <%= f.association :pack, label: 'или выберите пачку', collection: Pack.all.order('LOWER(name) ASC'), include_blank: true, input_html: { id: 'pack-select' } %>
        </div>
      </div>
      <div class='product-select-tag'>
        <%= f.association :product, label: 'выберите размера', collection: Product.all.order('LOWER(name) ASC'), include_blank: false, input_html: { id: 'product-select', placeholder: 'выберите размер' } %>
      </div>
      <%= f.input :amount, label: 'Количество', input_html: {value: ''} %>
      <div class='row'>
        <div class='col-sm-6'><%= f.input :sell_price, label: 'Цена в $ (1 шт.)' %></div>
        <div class='col-sm-6'><%= f.input :sell_price_in_uzs, label: 'Цена cум (1 шт.)' %></div>
      </div>
      <div class='row'>
        <div class='col-sm-6'>
          <%= f.input :min_price_in_usd, label: 'Минимум цена в $', input_html: { disabled: true } %>
        </div>
        <div class='col-sm-6'>
          <%= f.input :initial_remaining, label: 'остаток пачкa', input_html: { disabled: true } %>
        </div>
      </div>
      <div class='row'>
        <div class='col-sm-6 product-select-tag'>
          <%= f.input :remaining_outside_pack, label: 'остаток вне пачки', input_html: { disabled: true } %>
        </div>
        <div class='col-sm-6 align-self-center'>
          <%= f.submit 'Добавить', class: 'btn btn-primary'%>
        </div>
      </div>

      <%= f.input :rate, as: :hidden, input_html: { value: rate } %>
    </div>
  <% end %>
</div>


<script>
  $(document).ready(function() {
    $('.product-select-tag').hide();
    $('form').on('keypress', e => {
      if (e.keyCode == 13) {
        return false;
      }
    });

    $("input").focus(function() {
      $(this).select();
    });

    document.querySelector('#pack-select').addEventListener('change', function(e) {
      document.querySelector('#product_sell_amount').value = 1;
      handlePackChange();
      calculateSalePrice();
      filterProducts();
    })

    document.querySelector('#product_sell_amount').addEventListener('change', function(e) {
      e.preventDefault();
      calculateSalePrice();
    });

    document.querySelector('#product_sell_sell_by_piece').addEventListener('change', function(e) {
      e.preventDefault();
      $('.product-select-tag').toggle();
      calculateSalePrice();
      if (document.querySelector('#pack-select').value != null) {
        filterProducts();
      };
    });

    document.querySelector('#product-select').addEventListener('change', function(e) {
      e.preventDefault();
      handleProductChange();
    });

    function filterProducts(){
      if (document.querySelector('#product_sell_sell_by_piece').checked) {
      var pack_id = document.querySelector('#pack-select').value;
       $.ajax({
        url: '/products/filtered_products',
        method: 'GET',
        data: { pack_id: pack_id },
        dataType: 'script'
      });
      }
    }

    function calculateSalePrice(){
      var product_id = document.querySelector('#pack-select').value;
      var sell_price = document.querySelector('#product_sell_sell_price').value;
      var sell_by_piece = document.querySelector('#product_sell_sell_by_piece').checked;
      console.log('sell_by_piece ',sell_by_piece)
      var amount = document.querySelector('#product_sell_amount').value;
      var customActionURL = '/product_sells/ajax_sell_price_request';
      var data = {
        pack_id: product_id,
        amount: amount,
        sell_by_piece: sell_by_piece
      };
      var csrfToken = $('meta[name="csrf-token"]').attr('content');
      if(sell_price != 0 || sell_price != null){
        fetch(customActionURL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': csrfToken
          },
          body: JSON.stringify(data)
        })
        .then(function(response) {
          if (response.ok) {
            return response.json();;
          } else {
            console.log('error occured: ', response)
            throw new Error('Error: ' + response.text());
          }
        })
        .then(function(responseText) {
          document.querySelector('#product_sell_sell_price').value = responseText.average_sell_price_in_usd;
          document.querySelector('#product_sell_sell_price_in_uzs').value = responseText.average_sell_price_in_uzs;
          document.querySelector('#product_sell_min_price_in_usd').value = responseText.minimum_buy_price_in_usd;
        })
        .catch(function(error) {
          console.error(error);
          throw new Error('Error: ' + error);
        });
      }
    }

    var codeInput = document.getElementById('code-input');
    var packSelect = document.getElementById('pack-select');
    var h1Element = document.querySelector('#pack-name');

    packSelect.addEventListener('change', function() {
      // Update the content of the <h1> tag with the selected pack's text content
      var selectedPackOption = packSelect.options[packSelect.selectedIndex];
      var selectedPackText = selectedPackOption ? selectedPackOption.text : '';
      h1Element.textContent = selectedPackText;
    });
    // Event listener for code input change
    codeInput.addEventListener('input', function() {
      // Filter the pack options based on the code input value
      var codeValue = codeInput.value.trim().toLowerCase();

      // Make an AJAX request to the filtered_packs action
      $.ajax({
        url: '/packs/filtered_packs',
        method: 'GET',
        data: { code_value: codeValue },
        dataType: 'script',
        success: function() {
          // Update the content of the <h1> tag with the selected pack's text content
          var selectedPackOption = packSelect.options[packSelect.selectedIndex];
          var selectedPackText = selectedPackOption ? selectedPackOption.text : '';
          h1Element.textContent = selectedPackText;
          handlePackChange();
          document.querySelector('#product_sell_amount').value = 1;
        }
      });
      filterProducts();
    });


    function handlePackChange() {
      var packSelect = document.querySelector("#pack-select");
      var initialRemainingInput = document.querySelector("#product_sell_initial_remaining");

      if (packSelect) {
        var productId = packSelect.value;
        fetch('/packs/' + productId + '/calculate_product_remaining')
          .then(response => response.json())
          .then(data => {
            initialRemainingInput.value = data.calculate_product_remaining;
          })
          .catch(error => console.error('Error:', error));
      }
    }

    function handleProductChange() {
      var productSelect = document.querySelector("#product-select");
      var initialRemainingInput = document.querySelector("#product_sell_initial_remaining");
      var outRemainingInput = document.querySelector("#product_sell_remaining_outside_pack");

      if (productSelect) {
        var productId = productSelect.value;
        fetch('/products/' + productId + '/calculate_product_remaining')
          .then(response => response.json())
          .then(data => {
            initialRemainingInput.value = data.calculate_product_remaining_in_pack;
            outRemainingInput.value = data.calculate_product_remaining_out_pack;
          })
          .catch(error => console.error('Error:', error));
      }
    }
  })

  var sellPriceInput = document.getElementById('product_sell_sell_price');
    var sellPriceInUzsInput = document.getElementById('product_sell_sell_price_in_uzs');
    var rateInput = document.getElementById('product_sell_rate');

    // Function to update sell price in uzs when sell price changes
    sellPriceInput.addEventListener('input', function() {
      console.log('changed')
      var sellPrice = parseFloat(this.value);
      console.log('sellPrice: ', this.value)
      var rate = parseFloat(rateInput.value);
      console.log('rate: ', this.value)
      var result = (sellPrice * rate).toFixed(2)
      console.log('reult is ', result)
      sellPriceInUzsInput.value = result;
    });

    // Function to update sell price when sell price in uzs changes
    sellPriceInUzsInput.addEventListener('input', function() {
      var sellPriceInUzs = parseFloat(this.value);
      var rate = parseFloat(rateInput.value);
      sellPriceInput.value = (sellPriceInUzs / rate).toFixed(2);
    });

    // Function to update sell price in uzs when rate changes
    rateInput.addEventListener('input', function() {
      var sellPrice = parseFloat(sellPriceInput.value);
      var rate = parseFloat(this.value);
      sellPriceInUzsInput.value = (sellPrice * rate).toFixed(2);
    });
</script>
